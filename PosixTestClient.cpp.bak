/* Copyright (C) 2013 Interactive Brokers LLC. All rights reserved. This code is subject to the terms
 * and conditions of the IB API Non-Commercial License or the IB API Commercial License, as applicable. */

#include "PosixTestClient.h"

#include "EPosixClientSocket.h"
#include "EPosixClientSocketPlatform.h"

#include "Contract.h"
#include "ScannerSubscription.h"
#include "Order.h"

#define KXVER 3

#include <stdio.h>
//#include <float.h>
#include"k.h"
#include <sstream>

extern int finish;
extern int reconnect;
extern K khist;
extern K kcontr;
//extern K res;
std::vector<double> op,hi,lo,cl,dat;
std::vector<int> vo;
extern std::string scannerparams;
extern std::string curtimestr;
std::ostringstream strm;
extern int nextid;

//http://stackoverflow.com/questions/3418231/replace-part-of-a-string-with-another-string#3418285
bool replace(std::string& str, const std::string& from, const std::string& to) {
    size_t start_pos = str.find(from);
    if(start_pos == std::string::npos)
        return false;
    str.replace(start_pos, from.length(), to);
    return true;
}

//http://stackoverflow.com/questions/16573206/c-replace-char-in-char-array#16573261
char * replace_char(char * input, char find, char replace) 
{
	char * output = (char*)malloc(strlen(input));

	for (int i = 0; i < strlen(input); i++)
	{
		if (input[i] == find) output[i] = replace;
		else output[i] = input[i];
	}

	output[strlen(input)] = '\0';

	return output;
}

///////////////////////////////////////////////////////////
// member funcs
PosixTestClient::PosixTestClient()
	: m_pClient(new EPosixClientSocket(this))
	, m_state(ST_CONNECT)
	, m_sleepDeadline(0)
	, m_orderId(0)
{
}

PosixTestClient::~PosixTestClient()
{
}

//extern Contract contract;
	
bool PosixTestClient::connect(const char *host, unsigned int port, int clientId)
{
	//printf( "Connecting to %s:%d clientId:%d\n", !( host && *host) ? "127.0.0.1" : host, port, clientId);
	bool bRes;
	if(reconnect==0) 
		bRes = m_pClient->eConnect( host, port, clientId);// , /* extraAuth */ false);
	else
		bRes= true;
	
	if (bRes) {
		printf( "Connected to %s:%d clientId:%d\n", !( host && *host) ? "127.0.0.1" : host, port, clientId);
	}
	else
		printf( "Cannot connect to %s:%d clientId:%d\n", !( host && *host) ? "127.0.0.1" : host, port, clientId);
			
	return bRes;
}

void PosixTestClient::disconnect() const
{
	m_pClient->eDisconnect();
	printf ( "Disconnected\n");
}

bool PosixTestClient::isConnected() const
{
	return m_pClient->isConnected();
}

void PosixTestClient::reqHistData(Contract c,Histstruct hs)
{
	
//	m_pClient->reqHistoricalData(1,c,"20160715 00:00:00","5 D","1 min","TRADES",1,2);	
	m_pClient->reqHistoricalData(1,c,hs.from,hs.dur,hs.step,hs.what,hs.rth,hs.date);  //1:rth, last int=2 for seconds since epoch	
}

void PosixTestClient::processMessages()
{
	fd_set readSet, writeSet, errorSet;

	struct timeval tval;
	tval.tv_usec = 0;
	tval.tv_sec = 0;
	tval.tv_sec = 5;

	time_t now = time(NULL);
	
	if( m_pClient->fd() >= 0 ) {

		FD_ZERO( &readSet);
		errorSet = writeSet = readSet;

		FD_SET( m_pClient->fd(), &readSet);

		if( !m_pClient->isOutBufferEmpty())
			FD_SET( m_pClient->fd(), &writeSet);

		FD_SET( m_pClient->fd(), &errorSet);
		
		int ret = select( m_pClient->fd() + 1, &readSet, &writeSet, &errorSet, &tval);
		
		if( ret == 0) { // timeout
			return;
		}

		if( ret < 0) {	// error
			disconnect();
			return;
		}

		if( m_pClient->fd() < 0)
			return;

		if( FD_ISSET( m_pClient->fd(), &errorSet)) {
			// error on socket
			m_pClient->onError();
		}

		if( m_pClient->fd() < 0)
			return;

		if( FD_ISSET( m_pClient->fd(), &writeSet)) {
			// socket is ready for writing
			m_pClient->onSend();
		}

		if( m_pClient->fd() < 0)
			return;

		if( FD_ISSET( m_pClient->fd(), &readSet)) {
			// socket is ready for reading
			m_pClient->onReceive();
		}
	}

}

//////////////////////////////////////////////////////////////////
// methods

void PosixTestClient::reqids()
{	
	m_pClient->reqIds(1); //reserve 1 orderId -> result in nextValidId()
}

void PosixTestClient::placeOrder(Contract c, Order o){
	finish=1;
	m_pClient->placeOrder(o.orderId, c, o);
}

void PosixTestClient::cancelOrder(long orderId){
	finish=1;
	m_pClient->cancelOrder(orderId);
}

///////////////////////////////////////////////////////////////////
// events
double zu(int u){return u/8.64e4-10957;}

void PosixTestClient::orderStatus( OrderId orderId, const IBString &status, int filled,
	   int remaining, double avgFillPrice, int permId, int parentId,
	   double lastFillPrice, int clientId, const IBString& whyHeld){}
void PosixTestClient::openOrder(OrderId orderId, const Contract& contr, const Order& ord, const OrderState&){}
void PosixTestClient::historicalData(TickerId reqId, const IBString& date, double open, double high,
		double low, double close, int volume, int barCount, double WAP, int hasGaps){
		//printf( "reqid: id=%ld,date=%s,open=%f,high=%f,low=%f,close=%f,volume=%d,barcount=%d,wap=%f,hasgaps=%d\n",
		//			reqId,date.c_str(),open,high,low,close,volume,barCount,WAP,hasGaps);

		if(strncmp("finished",date.c_str(),8)!=0) {
				//printf("%s %f %f %f %f %f\n",date.c_str(),open,high,low,close,(float)volume);
				dat.push_back( zu( std::stoi( date.c_str() ) ) );
				op.push_back(open);
				hi.push_back(high);
				lo.push_back(low);
				cl.push_back(close);
				vo.push_back(volume);
		} 
		else {
			finish=1;		
			K kdate,kopen,khigh,klow,kclose,kvolume;//,kbcount;
			K res = ktn(KS, 6);
			kS(res)[0] = ss((S)"time");
			kS(res)[1] = ss((S)"Open");
			kS(res)[2] = ss((S)"High");
			kS(res)[3] = ss((S)"Low");
			kS(res)[4] = ss((S)"Close");
			kS(res)[5] = ss((S)"Volume");
			//kS(res)[6] = ss((S)"Barcount");
			khist=res;
			kdate   = ktn(KZ,dat.size());
			kopen   = ktn(KF,dat.size());
			khigh   = ktn(KF,dat.size());
			klow    = ktn(KF,dat.size());
			kclose  = ktn(KF,dat.size());
			kvolume = ktn(KI,dat.size());
			//kbcount = ktn(KI,histlength);
				
			for(int i=0;i<dat.size();i++){
				kF(kdate)  [i]=dat[i];
				kF(kopen)  [i]=op[i];
				kF(khigh)  [i]=hi[i];
				kF(klow)   [i]=lo[i];
				kF(kclose) [i]=cl[i];
				kI(kvolume)[i]=vo[i];
			//	kI(kbcount)[i]=bc[i];
			}
			K vals=knk(6,kdate,kopen,khigh,klow,kclose,kvolume); //,kbcount);
			khist=xT(xD(res,vals));
			dat.clear();
			op.clear();
			hi.clear();
			lo.clear();
			cl.clear();
			vo.clear();
		}
}
void PosixTestClient::nextValidId( OrderId orderId)
{	//is called on twsconnect
	nextid=orderId;
	finish=1;
}
void PosixTestClient::position( const IBString& account, const Contract& contract, int position, double avgCost) {
}
void PosixTestClient::reqCurrentTime()
{
	m_pClient->reqCurrentTime();
}
void PosixTestClient::currentTime( long time)
{
		time_t t = (time_t)time;
		struct tm * timeinfo = localtime (&t);
		//printf( "The current server date/time is: %s", asctime( timeinfo));
		//http://stackoverflow.com/questions/2342162/stdstring-formatting-like-sprintf
		//http://stackoverflow.com/questions/20731/how-do-you-clear-a-stringstream-variable#20792
		strm.str(std::string());;
		strm << "The current server date/time is: " << asctime(timeinfo);
		curtimestr=strm.str();
		
		finish=1;
}
void PosixTestClient::reqscanparams(){
	printf("requesting params...\n");
	m_pClient->reqScannerParameters();
}

void PosixTestClient::reqscansub(){
	ScannerSubscription scansub;
	scansub.locationCode="STK.US.MAJOR"; //STK.US requires permission for pink sheets
	scansub.instrument="STK";
	//scansub.scanCode="MOST_ACTIVE";
	scansub.scanCode="TOP_PERC_GAIN";
	scansub.numberOfRows=10;
	scansub.stockTypeFilter="STOCK";
	//scansub.abovePrice=100.0;
	scansub.marketCapAbove=10000000000.0;
	
	m_pClient->reqScannerSubscription(1,scansub);
}

void PosixTestClient::error(const int id, const int errorCode, const IBString errorString)
{	// finish=1 so it can exit the message loop
	//printf( "Error id=%d, errorCode=%d, msg=%s\n", id, errorCode, errorString.c_str());
	if(errorCode==162)  { printf("pacing violation\n"); finish=1; }
	else if(errorCode == 504) // if "Not connected"
						  {	disconnect(); finish=1; }
	else if(errorCode == 1100) // if "Connectivity between IB and TWS has been lost"
						  {	disconnect(); finish=1; }
	else if(errorCode == 1101) // if "Connectivity between IB and TWS has been restored-data lost. must resubscribe"
						  {	disconnect(); finish=1; }
	else if(errorCode == 1102) // if "Connectivity between IB and TWS has been restored-data maintained."
						  {	disconnect(); finish=1; }
	else if(errorCode == 1300) // if "TWS socket port has been reset and this connection is being dropped. Please reconnect on the new port - <port_num>"
						  {	disconnect(); finish=1; }
//	else { printf("errorcode: %d, %s",errorCode,errorString.c_str()); finish=1; }
	
}
void PosixTestClient::tickPrice( TickerId tickerId, TickType field, double price, int canAutoExecute) {}
void PosixTestClient::scannerParameters(const IBString &xml) {
		FILE *fptr;
		scannerparams=xml.c_str();
		fptr=fopen("xmlparams.xml","w");
		//scannerparams=xml.c_str();
		//bool ret=replace(scannerparams,"\r",""); //doesn't work. need boost.h replace_all()
		//if(ret==true) printf("replace success!\n");
		fprintf(fptr,"%s",xml.c_str());
		fclose(fptr);
		finish=1;
}
void PosixTestClient::scannerData(int reqId, int rank, const ContractDetails &contractDetails,
	   const IBString &distance, const IBString &benchmark, const IBString &projection,
	   const IBString &legsStr) {
	   		printf("reqid:%d,rank:%d,sym:%s,exch:%s\n",reqId,rank,contractDetails.summary.symbol.c_str(),contractDetails.summary.exchange.c_str());
			finish=1;
}
void PosixTestClient::fundamentalData(TickerId reqId, const IBString& data) {
		printf("reqid:%d, data:%s ",reqId,data.c_str());
}
void PosixTestClient::tickGeneric(TickerId tickerId, TickType tickType, double value) {}
void PosixTestClient::tickString(TickerId tickerId, TickType tickType, const IBString& value) {}
void PosixTestClient::tickSize( TickerId tickerId, TickType field, int size) {}
void PosixTestClient::tickOptionComputation( TickerId tickerId, TickType tickType, double impliedVol, double delta,
											 double optPrice, double pvDividend,
											 double gamma, double vega, double theta, double undPrice) {}
void PosixTestClient::tickEFP(TickerId tickerId, TickType tickType, double basisPoints, const IBString& formattedBasisPoints,
							   double totalDividends, int holdDays, const IBString& futureExpiry, double dividendImpact, double dividendsToExpiry) {}
//void PosixTestClient::openOrder( OrderId orderId, const Contract&, const Order&, const OrderState& ostate) {}
void PosixTestClient::openOrderEnd() {}
void PosixTestClient::winError( const IBString &str, int lastError) {}
void PosixTestClient::connectionClosed() {}
void PosixTestClient::updateAccountValue(const IBString& key, const IBString& val,
										  const IBString& currency, const IBString& accountName) {}
void PosixTestClient::updatePortfolio(const Contract& contract, int position,
		double marketPrice, double marketValue, double averageCost,
		double unrealizedPNL, double realizedPNL, const IBString& accountName){}
void PosixTestClient::updateAccountTime(const IBString& timeStamp) {}
void PosixTestClient::accountDownloadEnd(const IBString& accountName) {}
void PosixTestClient::contractDetails( int reqId, const ContractDetails& contractDetails) {}
void PosixTestClient::bondContractDetails( int reqId, const ContractDetails& contractDetails) {}
void PosixTestClient::contractDetailsEnd( int reqId) {}
void PosixTestClient::execDetails( int reqId, const Contract& contract, const Execution& execution) {}
void PosixTestClient::execDetailsEnd( int reqId) {}

void PosixTestClient::updateMktDepth(TickerId id, int position, int operation, int side,
									  double price, int size) {}
void PosixTestClient::updateMktDepthL2(TickerId id, int position, IBString marketMaker, int operation,
										int side, double price, int size) {}
void PosixTestClient::updateNewsBulletin(int msgId, int msgType, const IBString& newsMessage, const IBString& originExch) {}
void PosixTestClient::managedAccounts( const IBString& accountsList) {}
void PosixTestClient::receiveFA(faDataType pFaDataType, const IBString& cxml) {}
void PosixTestClient::scannerDataEnd(int reqId) {}
void PosixTestClient::realtimeBar(TickerId reqId, long time, double open, double high, double low, double close,
								   long volume, double wap, int count) {}
void PosixTestClient::deltaNeutralValidation(int reqId, const UnderComp& underComp) {}
void PosixTestClient::tickSnapshotEnd(int reqId) {}
void PosixTestClient::marketDataType(TickerId reqId, int marketDataType) {}
void PosixTestClient::commissionReport( const CommissionReport& commissionReport) {}
void PosixTestClient::positionEnd() {}
void PosixTestClient::accountSummary( int reqId, const IBString& account, const IBString& tag, const IBString& value, const IBString& curency) {}
void PosixTestClient::accountSummaryEnd( int reqId) {}
void PosixTestClient::verifyMessageAPI( const IBString& apiData) {}
void PosixTestClient::verifyCompleted( bool isSuccessful, const IBString& errorText) {}
void PosixTestClient::displayGroupList( int reqId, const IBString& groups) {}
void PosixTestClient::displayGroupUpdated( int reqId, const IBString& contractInfo) {}
